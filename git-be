#!/bin/bash
set -euo pipefail #bash strict mode
# This script tells git you are me. Or, if arguments are supplied, that you are someone else.
# The -folder flag, which must be passed as the first argument to be, makes this your identity for not only the current folder, but also any subdirectories. (This is especially useful if your current folder is a collection of git directories. (But, of course, the only reason not to just use git config --global is when you have multiple such collections of git directories, such as one for work and one for yourself personally.) Naturally, the current folder does not have to be a git directory if you use this flag.)
#   It does this by placing a .gitconfig in the current folder to establish your identity and then modifying your git "global" (user home dir) .gitconfig file to include said current folder .gitconfig when you are in a subdirectory, by using conditional includes. (See https://git-scm.com/docs/git-config#_conditional_includes for an explanation of conditional includes.)
# This script does not have a -global flag because that is trivial to do with the default git config --global command
echo Current git identity:
git whoami || true # suppress error code to comply with strict mode

folder_mode=false
folder_config_or_nothing=""

if [ "$1" == "--folder" ] || [ "$1" == "-folder" ] || [ "$1" == "--dir" ] || [ "$1" == "-dir" ] ; then
  folder_mode=true
  folder_config_or_nothing="--file `pwd`/.gitconfig"
  shift
fi

#Make sure the user isn't passing folder in a disallowed place.
# (We check $1 in case the user passes the flag twice and it's been shifted down.)
#Note: if the user passes the flag folder twice, this can lead to odd errors. Shift may have consumed an argument but left $# unchanged, as it does.
if ([ "$#" -ge 1 ] && ([ "$1" == "--folder" ] || [ "$1" == "-folder" ] || [ "$1" == "--dir" ] || [ "$1" == "-dir" ])) || ([ "$#" -ge 2 ] && ([ "$2" == "--folder" ] || [ "$2" == "-folder" ] || [ "$2" == "--dir" ] || [ "$2" == "-dir" ])) || ([ "$#" -ge 3 ] && ([ "$3" == "--folder" ] || [ "$3" == "-folder" ] || [ "$3" == "--dir" ] || [ "$3" == "-dir" ])) ; then
  echo "git be: For simplicity's sake, the folder/dir flag must be passed as the first argument to git be, not any of the other positions."
  echo "(If you were trying to set that flag literally to be your name or email, have you considered not being The Joker?)"
  exit 22
fi

echo
if !([ "$#" -eq 1 ] && [ "$1" == "wyatt" ] || [ "$#" -eq 2 ]) ; then
  echo USAGE: "git be [[-]-folder|[-]-dir] wyatt|[user.name user.email]" && echo && echo "IMPLEMENTATION:" && cat "$0" && echo && exit 22 #usage message for invalid number of arguments
fi

#Handle the wyatt case
[ "$1" == "wyatt" ] && shift
name=${1:-wyattscarpenter}
email=${2:-wyattscarpenter@gmail.com}

echo Making the change...

if [ "$folder_mode" = true ] ; then
  git config --global includeIf.gitdir:`pwd`/.path `pwd`/.gitconfig #maybe this should be quoted differently somehow?
fi
git config $folder_config_or_nothing user.name "$name"
git config $folder_config_or_nothing user.email "$email"

echo Now, the current git identity is:
git whoami
