#!/bin/sh

# Inspired by example on the page https://gist.github.com/octocat/0831f3fbd83ac4d46451

if [ "$#" -ne 3 ]; then
  echo "Usage: $0 old_email correct_name correct_email" >&2
  echo "NOTE: \" marks are not allowed in the name field, or any other field for that matter. You may, however, use the curly quotes “ and ”. This is a limitation of this script in particular, not git itself."
  exit 1
fi
rm -rf .git-rewrite/ # Clean up any previous aborted attempts.
export FILTER_BRANCH_SQUELCH_WARNING=1 # Disable delay where git-filter-branch warns you not to use git-filter-branch.
# The quoting here is quite specific. I'm not sure why, but this is the only combination I've found that works anymore Well, you don't *need* the escaped quotes (\"), but those make the variable ingestion less brittle to eg spaces in the name field—but you could just have the escaped dollar sign (\$) sigil alone. NOTE: it is still brittle to " passed in as a variable, but luckily syntax errors on that instead of anything worse. There are theoretically ways around that limitation but when I tried to fix it I just broke it more so I gave up.
git filter-branch -f --env-filter "
OLD_EMAIL=\"$1\"
CORRECT_NAME=\"$2\"
CORRECT_EMAIL=\"$3\"
if [ \"\$GIT_COMMITTER_EMAIL\" = \"\$OLD_EMAIL\" ] ; then
  export GIT_COMMITTER_NAME=\"\$CORRECT_NAME\"
  export GIT_COMMITTER_EMAIL=\"\$CORRECT_EMAIL\"
fi
if [ \"\$GIT_AUTHOR_EMAIL\" = \"\$OLD_EMAIL\" ] ; then
  export GIT_AUTHOR_NAME=\"\$CORRECT_NAME\"
  export GIT_AUTHOR_EMAIL=\"\$CORRECT_EMAIL\"
fi
" --tag-name-filter cat -- --branches --tags
