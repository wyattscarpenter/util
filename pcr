#!/bin/bash
#PCR: PERL COMPATIBLE REPLACE
#applies regexes... the way I think it should be done
#apologies:
#you must have perl installed to use this
#typing eg pcr \n foo won't work, because the \ will escape in bash
# and therefore be a regular n by the time it gets to the program

#outputs the modified file contents to stdout, you might want to pipe to sponge
[ "$#" -ne 3 ] && echo USAGE: "$0 perl_regex_to_be_found replacement_for_the_previous file_from_which_to_read " && echo && echo "IMPLEMENTATION:" && cat "$0" && echo && exit 22 #usage message for invalid number of arguments

perl -0777 -pe "s/$1/$2/gis" < "$3"

#here's an easy loop you can use:
# for i in * ; do echo "$i" pcr '' '' "$i" | sponge "$i" ; done

#TODO: this entire name and concept is maybe bad and I might want to redo the entire UX of this, and also name it something better.
