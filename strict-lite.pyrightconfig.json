/* (This file is json, which is technically not allowed to have comments, but we include these javascript comments anyway, because it works fine.)
Cross-posted to https://github.com/microsoft/pyright/discussions/10775 as well (I have made a couple of removals since then, and may make more later), which reads (edited for clarity):
> I love using pyright and how it helps me catch errors in my code! Recently I've been experimenting with something I've been thinking of as "strict-lite" mode. Basically, I want to enable every check from "strict" (and maybe more...) except those that complain as a result of my dependencies being untyped, because it's not realistic for me to type-annotate all of my dependencies. (Although, I totally understand that ideally I would, in order to actually achieve type soundness.) Also: I didn't verify these were all because my dependencies were untyped. Basically I just switched strict mode on, got 800 new type errors, and then removed rules until they got down to a manageable level (the manageable level being the new errors caught by strict that I could actually do something about, some of which were quite helpful).

This file can be used as-is, if you don't have any other config file (although in that case you really should add `"enableTypeIgnoreComments: false` as well...), or its rules can be copied into your file, perhaps with documentation comments pointing to where they came from. These settings are, of course, public domain, because I can't copyright... setting some settings in pyright. So, no attribution is legally required; but you might find it useful to document your intentions.

This file can be used with basedpyright instead of pyright, but in that case you should remove the `"typeCheckingMode": "strict"` line. Basedpyright has various benefits over pyright, such as installing correctly. The main problem with basedpyright is that it turns all of the pyright diagnostics on by default, even the ones that are unrealistic to fix. These rules fix that. However, you also must remove the `"typeCheckingMode": "strict"` line because the default type checking mode of basedpyright is better than the default type checking mode of pyright. https://docs.basedpyright.com/v1.20.0/configuration/config-files/#recommended-and-all. The line specifying strict does that because strict mode is better than the default type checking mode of pyright, pyright you have to specify "strict" to get the better type checking mode. But in basedpyright, the same line will get you a worse typechecking mode. I guess technically if you remove the line you get recommended-lite rather than strict-lite; but that's fine â€” that's better. Using this file with basedpyright is an area of speculation for me, since I didn't do it very much. You could also just use this file in basedpyright and keep the strict line and get a strict-lite experience almost identical to what using it in pyright would get you. Some day I might propose strict-lite or recommended-lite to (based)pyright, but it's not likely.
*/
{
  "typeCheckingMode": "strict", // Far too many complaints about types being "partially unknown" for us to use this on its own, at least at the moment.
  "reportUnknownMemberType": false,
  "reportUnknownVariableType": false,
  "reportUnknownArgumentType": false,
  "reportMissingTypeStubs": false
}
